package org.xbmc.fakemailer.RoomDb;import android.content.Context;import android.os.AsyncTask;import android.widget.Toast;import androidx.lifecycle.LiveData;import androidx.room.Room;import org.xbmc.fakemailer.Model.Mail;import java.util.List;public class MailRepo {    private String DB_NAME = "mail_db";    RoomDataBase roomDataBase;    Context context;    Integer valueee;    LiveData<List<Mail>> list;    LiveData<List<Mail>>  lists;    public MailRepo(Context context) {        this.context = context;        roomDataBase = Room.databaseBuilder ( context, RoomDataBase.class, DB_NAME ).build ( );    }    //     inserting data in database    public void inserTask(Mail mail) {        new AsyncTask<Void, Void, Void> ( ) {            @Override            protected Void doInBackground(Void... voids) {                roomDataBase.mailDao ( ).insertTask ( mail );                return null;            }            @Override            protected void onPostExecute(Void aVoid) {                super.onPostExecute ( aVoid );                Toast.makeText ( context, "Mail created for " + mail.getMail ( ), Toast.LENGTH_SHORT ).show ( );            }        }.execute ( );    }    //     check data in database    public Integer checkMail(String mail) {        new AsyncTask<Boolean, Boolean, Integer> ( ) {            @Override            protected Integer doInBackground(Boolean... parm) {                return roomDataBase.mailDao ( ).checkMailExist ( mail );            }            @Override            protected void onPostExecute(Integer value) {             value = valueee;            }        }.execute ( );        return valueee;    }    public LiveData<List<Mail>> selectTask() {        list = roomDataBase.mailDao ( ).getAllMail ( );        return list;    }    public LiveData<List<Mail>> selectMailOnID(String mails) {        lists = roomDataBase.mailDao ( ).getAllMailOnId (mails );        return lists;    }    //     update data in database    public void updateTask(Mail mail) {        new AsyncTask<Void, Void, Void> ( ) {            @Override            protected Void doInBackground(Void... voids) {                roomDataBase.mailDao ( ).updateTast ( mail.getId ( ), mail.getMail ( ) );                return null;            }            @Override            protected void onPostExecute(Void aVoid) {                super.onPostExecute ( aVoid );                Toast.makeText ( context, "Data is updated for " + mail.getMail ( ), Toast.LENGTH_SHORT ).show ( );            }        }.execute ( );    }    public void deleteTask(String mail) {        new AsyncTask<Void, Void, Void> ( ) {            @Override            protected Void doInBackground(Void... voids) {                roomDataBase.mailDao ( ).deleteTask ( mail );                return null;            }            @Override            protected void onPostExecute(Void aVoid) {                super.onPostExecute ( aVoid );                Toast.makeText ( context, "Email address deleted for user " + mail, Toast.LENGTH_SHORT ).show ( );            }        }.execute ( );    }}