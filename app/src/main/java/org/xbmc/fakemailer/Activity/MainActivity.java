package org.xbmc.fakemailer.Activity;import android.annotation.SuppressLint;import android.app.Activity;import android.content.ClipboardManager;import android.content.Intent;import android.net.Uri;import android.os.AsyncTask;import android.os.Bundle;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.Gravity;import android.view.MenuItem;import android.view.View;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.UiThread;import androidx.appcompat.app.ActionBarDrawerToggle;import androidx.appcompat.app.AppCompatActivity;import androidx.core.view.GravityCompat;import androidx.drawerlayout.widget.DrawerLayout;import androidx.fragment.app.FragmentManager;import androidx.fragment.app.FragmentTransaction;import androidx.lifecycle.LiveData;import androidx.lifecycle.MutableLiveData;import androidx.recyclerview.widget.DefaultItemAnimator;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.github.ybq.android.spinkit.SpinKitView;import com.google.android.gms.ads.AdListener;import com.google.android.gms.ads.AdRequest;import com.google.android.gms.ads.AdView;import com.google.android.gms.ads.InterstitialAd;import com.google.android.gms.ads.MobileAds;import com.google.android.material.navigation.NavigationView;import org.xbmc.fakemailer.Adapter.DataAdapter;import org.xbmc.fakemailer.Helper.SessionManager;import org.xbmc.fakemailer.Model.DataModel;import org.xbmc.fakemailer.Model.Mail;import org.xbmc.fakemailer.Model.MailDomain;import org.xbmc.fakemailer.R;import org.xbmc.fakemailer.RoomDb.MailDao;import org.xbmc.fakemailer.RoomDb.MailRepo;import org.xbmc.fakemailer.RoomDb.RoomDataBase;import org.xbmc.fakemailer.Utils.RestApiService;import org.xbmc.fakemailer.Utils.RetrofitInstance;import java.util.ArrayList;import java.util.List;import java.util.Objects;import java.util.Random;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {    RecyclerView recyclerview;    DataAdapter dataAdapter;    Spinner spiner_mail, spiner_mail_two;    RelativeLayout reletive_add;    ArrayAdapter<String> adapter;    ArrayAdapter<String> arrayAdapter;    SpinKitView spin_kit;    EditText txt_username, txt_searching;    RoomDataBase roomDataBase;    MailDao mailDao;    AdView adView;    Call<DataModel> call;    String value = "@wootap.me";    DrawerLayout drawer;    private InterstitialAd interstitialAd;    ImageView img_sidbar;    NavigationView navigationView;    LinearLayout linear_side, linear_empty;    String user_name, domain, sel_domain;    public AdView mAdView,mAdView1;    int position_value;    Button btn_save, btn_cancel, btn_refresh;    TextView txt_eror, txt_title;    ArrayList<DataModel> arrayList = new ArrayList();    MailRepo mailRepo;    LiveData<List<Mail>> spinerDataaaa;    ImageView img_add, img_refresh, img_delete, img_search, img_copy;    SessionManager sessionManager;    List<String> spinerData = new ArrayList<>();    List<String> spinerDomainData = new ArrayList<>();    boolean searching = true;    ActionBarDrawerToggle toggle;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        initViews();        declareViews();        clickViews();        toggle = new ActionBarDrawerToggle(this, drawer, R.string.navigation_drawer_open, R.string.navigation_drawer_close);        drawer.setDrawerListener(toggle);        toggle.syncState();        toggle.getDrawerArrowDrawable().setColor(getResources().getColor(R.color.colorAccent));//        toggle.setHomeAsUpIndicator(R.drawable.ic_dialpad);        navigationView.setNavigationItemSelectedListener(this);        toggle.setToolbarNavigationClickListener(v -> {            if (drawer.isDrawerVisible(GravityCompat.START)) {                drawer.closeDrawer(GravityCompat.START);            } else {                drawer.openDrawer(GravityCompat.START);            }        });        if (savedInstanceState == null) {            navigationView.getMenu().getItem(0).setChecked(true);            //add this line to display menu1 when the activity is loaded            displaySelectedScreen(R.id.home);        }    }    private void displaySelectedScreen(int itemId) {        switch (itemId) {            case R.id.share:                Intent intent = new Intent();                intent.setAction(Intent.ACTION_SEND);                intent.setType("text/plain");                intent.putExtra(Intent.EXTRA_TEXT, "iCloud");                intent.putExtra(Intent.EXTRA_TEXT, "https://play.google.com/store/apps/details?id=com.app.hamxidesigner.cloudi");                startActivity(Intent.createChooser(intent, "Share"));                overridePendingTransition(R.anim.slide_in, R.anim.slide_out);                break;            case R.id.feedback:                Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://tempmailgen.com/contact.php"));                startActivity(browserIntent);                overridePendingTransition(R.anim.slide_in, R.anim.slide_out);                break;            case R.id.about:                browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=com.app.hamzaali.homeexcercise"));                startActivity(browserIntent);                overridePendingTransition(R.anim.slide_in, R.anim.slide_out);                break;            case R.id.help:                browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://tempmailgen.com/faq"));                startActivity(browserIntent);                overridePendingTransition(R.anim.slide_in, R.anim.slide_out);                break;            case R.id.privacy:                browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://tempmailgen.com/terms"));                startActivity(browserIntent);                overridePendingTransition(R.anim.slide_in, R.anim.slide_out);                break;        }        drawer.closeDrawer(GravityCompat.START);    }    private void clickViews() {        img_sidbar.setOnClickListener(view -> {            Animation animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.model_in);            img_sidbar.startAnimation(animation);            if (drawer.isDrawerVisible(GravityCompat.START)) {                drawer.closeDrawer(GravityCompat.START);            } else {                drawer.openDrawer(GravityCompat.START);            }        });        txt_searching.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void afterTextChanged(Editable editable) {                dataAdapter.getFilter().filter(editable.toString());            }        });        img_copy.setOnClickListener(view -> {            Animation animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.model_in);            img_copy.startAnimation(animation);            ClipboardManager cm = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);            cm.setText(user_name + "@" + domain);            Toast.makeText(this, user_name + "@" + domain + " Copied to clipboard", Toast.LENGTH_SHORT).show();        });        img_search.setOnClickListener(view -> {            Animation animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.model_in);            img_search.startAnimation(animation);            txt_searching.startAnimation(animation);            linear_empty.setVisibility(View.GONE);            if (searching) {                txt_searching.setVisibility(View.VISIBLE);                txt_title.setVisibility(View.GONE);                img_search.setImageDrawable((getResources().getDrawable(R.drawable.ic_baseline_cancel_24)));                searching = false;            } else {                txt_searching.setVisibility(View.GONE);                txt_title.setVisibility(View.VISIBLE);                img_search.setImageDrawable((getResources().getDrawable(R.drawable.ic_baseline_search_24)));                searching = true;            }        });        img_refresh.setOnClickListener(view -> {            //   showInterstitial();            Animation animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.model_in);            img_refresh.startAnimation(animation);            if (!user_name.isEmpty() & !domain.isEmpty()) {                mailDataSet(user_name, domain);            }        });        btn_refresh.setOnClickListener(view -> {            Animation animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.model_in);            btn_refresh.startAnimation(animation);            if (!user_name.isEmpty() & !domain.isEmpty()) {                mailDataSet(user_name, domain);            }        });        img_delete.setOnClickListener(view -> {            Animation animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.model_in);            img_delete.startAnimation(animation);            int sizee = spinerData.size();            if (sizee == 0) {                Random generator = new Random();                String randomLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";                String randomLetterSmall = "abcdefghijklmnopqrstuvwxyz";                String mail = String.valueOf(randomLetterSmall.charAt(generator.nextInt(randomLetters.length())));                mail += String.valueOf(randomLetterSmall.charAt(generator.nextInt(randomLetters.length())));                mail += String.valueOf(randomLetterSmall.charAt(generator.nextInt(randomLetters.length())));                mail += String.valueOf(randomLetterSmall.charAt(generator.nextInt(randomLetters.length())));                if (!mail.equals("")) {                    Mail mailss = new Mail(mail + value);                    mailRepo.inserTask(mailss);                }            }            if (sizee != 0 & sizee > 0) {                showInterstitial();                if(call != null){                    call.isCanceled();                }                txt_eror.setVisibility(View.VISIBLE);                runOnUiThread(() -> {                    mailRepo.deleteTask(user_name + "@" + domain);                    spinerData.clear();                    Objects.requireNonNull(spinerDataaaa.getValue()).clear();                });            }        });        img_add.setOnClickListener(view -> {            showInterstitial();            Animation animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.model_in);            img_add.startAnimation(animation);            reletive_add.setVisibility(View.VISIBLE);            linear_empty.setVisibility(View.GONE);        });        btn_cancel.setOnClickListener(view -> {            Animation animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.model_in);            btn_cancel.startAnimation(animation);            reletive_add.setVisibility(View.GONE);            InputMethodManager imm = (InputMethodManager) getApplicationContext().getSystemService(Activity.INPUT_METHOD_SERVICE);            imm.hideSoftInputFromWindow(view.getWindowToken(), 0);        });        spiner_mail_two.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {                if (spinerDomainData != null & spinerDomainData.size() != 0) {                    sel_domain = spinerDomainData.get(i);                }            }            @Override            public void onNothingSelected(AdapterView<?> adapterView) {                if (spinerDomainData != null & spinerDomainData.size() != 0) {                    sel_domain = spinerDomainData.get(0);                }            }        });        spiner_mail.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {                if (spinerData != null & spinerData.size() != 0) {                    position_value = i;                    String selMail = spinerData.get(i);                    String[] parts = selMail.split("\\@");                    user_name = parts[0];                    domain = parts[1];                    if (!user_name.isEmpty() & !domain.isEmpty()) {                        runOnUiThread(new Runnable() {                            @Override                            public void run() {                                mailDataSet(user_name, domain);                            }                        });                    }                }            }            @Override            public void onNothingSelected(AdapterView<?> adapterView) {                if (spinerData != null & spinerData.size() != 0) {                    position_value = 0;                    String selMail = spinerData.get(0);                    String[] parts = selMail.split("\\@");                    user_name = parts[0];                    domain = parts[1];                    if (!user_name.isEmpty() & !domain.isEmpty()) {                        runOnUiThread(new Runnable() {                            @Override                            public void run() {                                mailDataSet(user_name, domain);                            }                        });                    }                }            }        });        btn_save.setOnClickListener(view -> {            Animation animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.model_in);            btn_save.startAnimation(animation);            if (!txt_username.getText().toString().equals("") & !sel_domain.equals("")) {                check(txt_username.getText().toString().trim() + "@" + sel_domain.trim());                InputMethodManager imm = (InputMethodManager) getApplicationContext().getSystemService(Activity.INPUT_METHOD_SERVICE);                imm.hideSoftInputFromWindow(view.getWindowToken(), 0);            } else {                Toast.makeText(this, "Enter User Name Please", Toast.LENGTH_SHORT).show();            }        });    }    private void check(String mail) {        LiveData<List<Mail>> spinerDataaaa;        spinerDataaaa = mailRepo.selectMailOnID(mail);        spinerDataaaa.observe(this, mailss -> {            int checkVal = mailss.size();            if (checkVal == 0) {                Toast.makeText(this, "Mail added", Toast.LENGTH_SHORT).show();                Mail mailssi = new Mail(txt_username.getText().toString().trim() + "@" + sel_domain.trim());                mailRepo.inserTask(mailssi);                reletive_add.setVisibility(View.GONE);                spinerData.clear();                Objects.requireNonNull(spinerDataaaa.getValue()).clear();                txt_username.setText("");            }        });    }    private void declareViews() {        MobileAds.initialize(this, initializationStatus -> {        });        interstitialAd = new InterstitialAd(MainActivity.this);        interstitialAd.setAdUnitId("ca-app-pub-3094951374738350/5733453113");        AdRequest adRequest1 = new AdRequest.Builder().build();        interstitialAd.loadAd(adRequest1);        AdRequest adRequest = new AdRequest.Builder().build();        mAdView.loadAd(adRequest);        roomDataBase = RoomDataBase.getDatabase(getApplicationContext());        mailDao = roomDataBase.mailDao();        mailRepo = new MailRepo(getApplicationContext());        sessionManager = new SessionManager(getApplicationContext());        if (!sessionManager.getLogin()) {            Random generator = new Random();            String randomLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";            String randomLetterSmall = "abcdefghijklmnopqrstuvwxyz";            String mail = String.valueOf(randomLetterSmall.charAt(generator.nextInt(randomLetters.length())));            mail += String.valueOf(randomLetterSmall.charAt(generator.nextInt(randomLetters.length())));            mail += String.valueOf(randomLetterSmall.charAt(generator.nextInt(randomLetters.length())));            mail += String.valueOf(randomLetterSmall.charAt(generator.nextInt(randomLetters.length())));            if (!mail.isEmpty()) {                Mail mailss = new Mail(mail + value);                mailRepo.inserTask(mailss);                spinerDataaaa = mailRepo.selectTask();                spinerDataaaa.observe(this, mails -> {                    if (mails.size() != 0) {                        spiner_mail.setVisibility(View.VISIBLE);                        for (int vee = 0; vee < spinerDataaaa.getValue().size(); vee++) {                            String mailvalue = spinerDataaaa.getValue().get(vee).getMail();                            spinerData.add(mailvalue);                        }                        arrayAdapter = new ArrayAdapter<String>(getApplicationContext(), R.layout.list_spiner, spinerData);                        spiner_mail.setAdapter(arrayAdapter);                    } else {                        spiner_mail.setVisibility(View.GONE);                        Toast.makeText(this, "No mail found", Toast.LENGTH_SHORT).show();                    }                });                sessionManager.setLogin(true);            }        } else if (sessionManager.getLogin()) {            spinerDataaaa = mailRepo.selectTask();            spinerDataaaa.observe(this, mail -> {                if (mail.size() != 0) {                    spiner_mail.setVisibility(View.VISIBLE);                    for (int vee = 0; vee < spinerDataaaa.getValue().size(); vee++) {                        String mailvalue = spinerDataaaa.getValue().get(vee).getMail();                        spinerData.add(mailvalue);                    }                    arrayAdapter = new ArrayAdapter<String>(getApplicationContext(), R.layout.list_spiner, spinerData);                    spiner_mail.setAdapter(arrayAdapter);                }                if (mail.size() == 0) {                    spiner_mail.setVisibility(View.GONE);                    Toast.makeText(getApplicationContext(), "No mail found", Toast.LENGTH_SHORT).show();                }            });        }        dataAdapter = new DataAdapter(MainActivity.this, arrayList, user_name, domain);        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getApplicationContext());        recyclerview.setLayoutManager(mLayoutManager);        recyclerview.setItemAnimator(new DefaultItemAnimator());        recyclerview.setAdapter(dataAdapter);        dataAdapter.notifyDataSetChanged();        getMailDomain();    }    private void mailDataSet(String user_name, String domain) {        img_delete.setClickable(false);        dataAdapter.delete();        linear_empty.setVisibility(View.GONE);        spin_kit.setVisibility(View.VISIBLE);        RestApiService apiInterface = RetrofitInstance.getClient().create(RestApiService.class);        call = apiInterface.getMails(user_name, domain);        call.enqueue(new Callback<DataModel>() {            @Override            public void onResponse(Call<DataModel> call, Response<DataModel> response) {                if (response.body() != null)                    if (response.isSuccessful()) {                        spin_kit.setVisibility(View.GONE);                        img_delete.setClickable(true);                        if (response.body().getSuccess().equals("true")) {                            if (!response.body().getResult().getTotal().equals("0")) {                                arrayList = response.body().getResult().getEmail();                                if (arrayList != null || arrayList.size() != 0) {                                    dataAdapter.setData(arrayList, user_name, domain);                                } else {                                    linear_empty.setVisibility(View.VISIBLE);                                    spin_kit.setVisibility(View.GONE);                                }                            } else {                                linear_empty.setVisibility(View.VISIBLE);                                spin_kit.setVisibility(View.GONE);                                Toast.makeText(getApplicationContext(),"No Mail Found", Toast.LENGTH_SHORT).show();                            }                        } else {                            linear_empty.setVisibility(View.GONE);                            spin_kit.setVisibility(View.GONE);                            Toast.makeText(getApplicationContext(), response.body().getMessage(), Toast.LENGTH_SHORT).show();                        }                    }            }            @Override            public void onFailure(Call<DataModel> call, Throwable t) {                spin_kit.setVisibility(View.GONE);                img_delete.setClickable(true);                Log.d("errrrrrr", t + "");                linear_empty.setVisibility(View.VISIBLE);                Toast.makeText(getApplicationContext(), t + "", Toast.LENGTH_SHORT).show();            }        });    }    private void getMailDomain() {        RestApiService apiInterface = RetrofitInstance.getClient().create(RestApiService.class);        // spin_kit.setVisibility(View.VISIBLE);        Call<MailDomain> call = apiInterface.getMailDomain();        call.enqueue(new Callback<MailDomain>() {            @Override            public void onResponse(Call<MailDomain> call, Response<MailDomain> response) {                if (response.body() != null)                    if (response.isSuccessful()) {                        //   spin_kit.setVisibility(View.GONE);                        if (response.body().isSuccess()) {                            spinerDomainData = response.body().getResult();                            adapter = new ArrayAdapter<String>(getApplicationContext(), R.layout.list_spiner, spinerDomainData);                            spiner_mail_two.setAdapter(adapter);                        } else {                            //    spin_kit.setVisibility(View.GONE);                        }                    }            }            @Override            public void onFailure(Call<MailDomain> call, Throwable t) {                //  spin_kit.setVisibility(View.GONE);                //   Toast.makeText(getApplicationContext(), "addresses not found", Toast.LENGTH_SHORT).show();            }        });    }    private void initViews() {        recyclerview = findViewById(R.id.recyclerview);        spiner_mail = findViewById(R.id.spiner_mail);        img_add = findViewById(R.id.img_add);        reletive_add = findViewById(R.id.reletive_add);        btn_save = findViewById(R.id.btn_save);        spiner_mail_two = findViewById(R.id.spiner_mail_two);        spin_kit = findViewById(R.id.spin_kit);        txt_eror = findViewById(R.id.txt_eror);        txt_username = findViewById(R.id.txt_username);        btn_cancel = findViewById(R.id.btn_cancel);        img_refresh = findViewById(R.id.img_refresh);        img_delete = findViewById(R.id.img_delete);        img_search = findViewById(R.id.img_search);        linear_side = findViewById(R.id.linear_side);        txt_searching = findViewById(R.id.txt_searching);        txt_title = findViewById(R.id.txt_title);        img_copy = findViewById(R.id.img_copy);        linear_empty = findViewById(R.id.linear_empty);        btn_refresh = findViewById(R.id.btn_refresh);        mAdView = findViewById(R.id.adView);        navigationView = findViewById(R.id.nav_view);        drawer = findViewById(R.id.drawer_layout);        img_sidbar = findViewById(R.id.img_sidbar);    }    @Override    public boolean onNavigationItemSelected(@NonNull MenuItem item) {        displaySelectedScreen(item.getItemId());        return true;    }    private void showInterstitial() {        if (interstitialAd != null & interstitialAd.isLoaded()) {            interstitialAd.show();        } else {            Log.d("intertitial ads eror", "eror");        }        interstitialAd.setAdListener(new AdListener() {            @Override            public void onAdClosed() {                interstitialAd.loadAd(new AdRequest.Builder().build());            }        });    }}